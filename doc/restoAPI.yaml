openapi: 3.0.3
info:
  title: Restaurant Management API - 2025 [J]
  description: Restaurant Management API - 2025 [J]
  version: 1.0.0

servers:
  - url: https://localhost:8080

paths:
  /ingredients:
    get:
      summary: Get list of ingredients
      description: List of ingredients
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
      responses:
        200:
          description: List of ingredients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ingredient'

  /ingredient:
    post:
      summary: Insert or update ingredients list
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Ingredient'
      responses:
        200:
          description: Ingredients inserted or updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ingredient'

  /ingredient/{id}:
    get:
      summary: Get ingredient by ID
      parameters:
        - $ref: '#/components/parameters/IngredientIdentifier'
      responses:
        200:
          description: Ingredient found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ingredient'
        404:
          description: Ingredient not found

    delete:
      summary: Delete ingredient by ID
      parameters:
        - $ref: '#/components/parameters/IngredientIdentifier'
      responses:
        200:
          description: Ingredient deleted
        404:
          description: Ingredient not found

  /ingredients/{id}/prices:
    put:
      summary: Add new prices to a specific ingredient
      parameters:
        - $ref: '#/components/parameters/IngredientIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Price'
      responses:
        200:
          description: Updated ingredient with new prices
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ingredient'

  /ingredients/{id}/stockMovements:
    put:
      summary: Add stock movements to a specific ingredient
      parameters:
        - $ref: '#/components/parameters/IngredientIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/StockMovement'
      responses:
        200:
          description: Updated ingredient with new stock movements
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ingredient'

  /dishes:
    get:
      summary: Get list of dishes
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
      responses:
        200:
          description: List of dishes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dish'

  /dish:
    post:
      summary: Create or update dishes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Dish'
      responses:
        200:
          description: Dishes inserted or updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dish'

  /dish/{id}:
    get:
      summary: Get dish by ID
      parameters:
        - $ref: '#/components/parameters/DishIdentifier'
      responses:
        200:
          description: Dish found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dish'
        404:
          description: Dish not found

    delete:
      summary: Delete dish by ID
      parameters:
        - $ref: '#/components/parameters/DishIdentifier'
      responses:
        200:
          description: Dish deleted
        404:
          description: Dish not found

components:
  parameters:
    Page:
      in: query
      name: offset
      schema:
        type: integer
        default: 1
      description: Pagination offset

    PageSize:
      in: query
      name: limit
      schema:
        type: integer
        default: 10
      description: Pagination limit

    IngredientIdentifier:
      in: path
      name: id
      required: true
      schema:
        type: integer
      description: Ingredient ID

    DishIdentifier:
      in: path
      name: id
      required: true
      schema:
        type: integer
      description: Dish ID

  schemas:
    Ingredient:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        prices:
          $ref: '#/components/schemas/Price'
        stockMovements:
          $ref: '#/components/schemas/StockMovement'
        availableQuantity:
          type: number
          format: double
        actualPrice:
          type: number
          format: double

    IngredientDTO:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string

    Unit:
      type: string
      enum:
        - G
        - L
        - U

    Dish:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        unitPrice:
          type: number
          format: double
        ingredientList:
          type: array
          items:
            $ref: '#/components/schemas/DishIngredient'

    DishDTO:
      type: object
      properties:
        dishId:
          type: integer
        dishName:
          type: string
        quantitySold:
          type: number
          format: double

    DishIngredient:
      type: object
      properties:
        ingredient:
          $ref: '#/components/schemas/IngredientDTO'
        requiredQuantity:
          type: number
          format: double
        unit:
          $ref: '#/components/schemas/Unit'

    Order:
      type: object
      properties:
        id:
          type: integer
        tableNumber:
          $ref: '#/components/schemas/TableNumber'
        amountPaid:
          type: number
          format: double
        amountDue:
          type: number
          format: double
        dishes:
          $ref: '#/components/schemas/DishOrder'

    DishOrder:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        quantityOrdered:
          type: number
          format: double
        actualOrderStatus:
          $ref: '#/components/schemas/OrderStatus'

    Price:
      type: object
      properties:
        id:
          type: integer
        price:
          type: number
          format: double
        unit:
          $ref: '#/components/schemas/Unit'
        updateDateTime:
          type: string
          format: date-time

    StockMovementType:
      type: string
      enum:
        - ENTRY
        - EXIT

    StockMovement:
      type: object
      properties:
        id:
          type: integer
        quantity:
          type: number
          format: double
        unit:
          $ref: '#/components/schemas/Unit'
        type:
          $ref: '#/components/schemas/StockMovementType'
        movementDate:
          type: string
          format: date-time

    TableNumber:
      type: string
      enum:
        - TABLE1
        - TABLE2
        - TABLE3

    OrderStatus:
      type: string
      enum:
        - CREATED
        - IN_PROGRESS
        - COMPLETED
        - CANCELLED
